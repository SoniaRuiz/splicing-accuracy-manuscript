------------------------------
-- bash code:
------------------------------

## Download the chr sizes
wget http://hgdownload.cse.ucsc.edu/goldenPath/hg38/bigZips/hg38.chrom.sizes

## Download the phastCons20way file and unzip it
rsync -avz --progress rsync://hgdownload.cse.ucsc.edu/goldenPath/hg38/phastCons20way/hg38.phastCons20way.wigFix.gz ./phastCons20way/
gzip -d ./phastCons20way/hg38.phastCons20way.wigFix.gz

## Download the tool bigWigToBedGraph
wget http://hgdownload.cse.ucsc.edu/admin/exe/linux.x86_64/bigWigToBedGraph
chmod 777 bigWigToBedGraph

## Use the wigToBigWig utility found here: http://hgdownload.cse.ucsc.edu/admin/exe/ to convert from wigFix to BigWig
wget http://hgdownload.cse.ucsc.edu/admin/exe/linux.x86_64/wigToBigWig
chmod 777 ./wigToBigWig
./wigToBigWig ./phastCons20way/hg38.phastCons20way.wigFix hg38.chrom.sizes ./phastCons20way/hg38.phastCons20way.bw

## Use the bigWigToBedGraph utility found here: http://hgdownload.cse.ucsc.edu/admin/exe/ to convert from BigWig to Bed
./bigWigToBedGraph ./phastCons20way/hg38.phastCons20way.bw ./phastCons20way/hg38.phastCons20way.bed

## Download the bedops utility (we will use it to find overlaps between bed files):
wget https://github.com/bedops/bedops/releases/download/v2.4.41/bedops_linux_x86_64-v2.4.41.tar.bz2
tar jxvf bedops_linux_x86_64-v2.4.41.tar.bz2 bin/

---------------------------------

---------------------------------
-- R code
---------------------------------

file_name <- "./phastCons20way/introns_splicing_database.bed"

if ( !file.exists(file_name) ) {

  ## dataframe with the genomic coordinates of the introns to study
  intron_coordinates


  ## Save file
  colnames(intron_coordinates) <- c('chrom', 'chromStart', 'chromEnd', 'strand')
  
  rtracklayer::export(object = intron_coordinates %>%
                        mutate(chromStart = chromStart -5, ## we add +5 window as the proximal intronic sequences are calculated -5/+35bp, -35/+5bp, '/' = exon/intron junction
                               chromEnd = chromEnd + 5) %>%
                        arrange(chrom, chromStart) %>%
                        as_tibble(), 
                      con = file_name, 
                      format = "bed")
} else {
  intron_coordinates <- rtracklayer::import(file_name)
}
---------------------------------


------------------------------
-- bash code:
------------------------------

##https://bedops.readthedocs.io/en/latest/content/reference/set-operations/bedops.html#element-of-e-element-of
## Both bed files need to be sorted!
bedops --element-of 1 ./phastCons20way/hg38.phastCons20way.bed ./phastCons20way/introns_splicing_database.bed > ./phastCons20way/phastCons_splicing_database.bed

## Perhaps, more efficient if extracted by chromosome:
bedops --chrom chrY --element-of 1 ./phastCons20way/hg38.phastCons20way.bed ./phastCons20way/introns_splicing_database.bed > ./phastCons20way/phastCons_splicing_database_chrY.bed

-----------------------------

-----------------------------
-- R code:
-----------------------------


db_introns_all <- NULL

for (c in c(1:22, "Y", "X")) {

  chr <- paste0("chr", c)
  message(chr)
  
  #########################################
  
  file_name <- paste0("./phastCons20way/phastCons_splicing_database_", chr, ".bed")
  overlap_introns_phastcons <- rtracklayer::import.bed(con = file_name)
  
  #########################################
   
  db_introns_tidy <- intron_coordinates %>%
    mutate(phastCons20way_5ss_mean = 0.0,
           phastCons20way_3ss_mean = 0.0) %>%
    filter(seqnames == chr) %>%
    GRanges()
  
  
  ## DONOR
  
  overlaps <- GenomicRanges::findOverlaps(query = overlap_introns_phastcons,
                                          subject = GenomicRanges::GRanges(seqnames = db_introns_tidy %>% seqnames(),
                                                                           ranges = IRanges(start = db_introns_tidy %>% start(), ## the -5 window was already added
                                                                                            end = db_introns_tidy %>% start() + 35),
                                                                           strand = db_introns_tidy %>% strand()),
                                          
                                          type = "any", 
                                          ignore.strand = T)
  
  
  overlaps_tidy <- overlaps %>%
    as_tibble() %>%
    mutate(mean_phastCons20way = (overlap_introns_phastcons[queryHits(overlaps),]$name) %>% as.double()) %>%
    drop_na() %>%
    group_by(subjectHits) %>%
    mutate(mean_phastCons20way_mean = mean_phastCons20way %>% mean()) %>%
    ungroup()
  
  
  db_introns_tidy[subjectHits(overlaps),]$phastCons20way_5ss_mean <- overlaps_tidy$mean_phastCons20way_mean
  
  
  ## ACCEPTOR
  
  overlaps <- GenomicRanges::findOverlaps(query = overlap_introns_phastcons,
                                          subject = GenomicRanges::GRanges(seqnames = db_introns_tidy %>% seqnames(),
                                                                           ranges = IRanges(start = db_introns_tidy %>% end() - 35,
                                                                                            end = db_introns_tidy %>% end()), ## the +5bp window was already added
                                                                           strand = db_introns_tidy %>% strand()),
                                          
                                          type = "any", 
                                          ignore.strand = T)
  
  overlap_introns_phastcons[queryHits(overlaps),][1,]
  db_introns_tidy[subjectHits(overlaps),][1,]
  
  overlaps_tidy <- overlaps %>%
    as_tibble() %>%
    mutate(mean_phastCons20way = (overlap_introns_phastcons[queryHits(overlaps),]$name) %>% as.double()) %>%
    drop_na() %>%
    group_by(subjectHits) %>%
    mutate(mean_phastCons20way_mean = mean_phastCons20way %>% mean()) %>%
    ungroup()
  
  
  db_introns_tidy[subjectHits(overlaps),]$phastCons20way_3ss_mean <- overlaps_tidy$mean_phastCons20way_mean
  
  
  ##############
  
  
  
  
  if (is.null(db_introns_all)) {
    db_introns_all <-db_introns_tidy %>% as_tibble()
  } else {
    db_introns_all <- rbind(db_introns_all, 
                            db_introns_tidy %>% as_tibble())
  }
  
}

saveRDS(object = db_introns_all,
        file = "./phastCons20way/CNC_CDTS_CONS_gr.rds")




-----------------------------